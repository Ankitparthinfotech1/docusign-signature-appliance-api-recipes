#ifndef __SAPIENUMS_H__
#define __SAPIENUMS_H__

#ifndef SAPICOM

typedef enum SAPI_ENUM_DRAWING_ELEMENT 
{
    SAPI_ENUM_DRAWING_ELEMENT_GRAPHICAL_IMAGE   = 0x00000001, 
    SAPI_ENUM_DRAWING_ELEMENT_SIGNED_BY         = 0x00000002,
    SAPI_ENUM_DRAWING_ELEMENT_REASON            = 0x00000004,
    SAPI_ENUM_DRAWING_ELEMENT_TIME              = 0x00000008,
    SAPI_ENUM_DRAWING_ELEMENT_KIND              = 0x00000010,  //not supported
	SAPI_ENUM_DRAWING_ELEMENT_TITLE				= 0x00000020,
	SAPI_ENUM_DRAWING_ELEMENT_ADDITIONAL_TXT	= 0x00000020,
	SAPI_ENUM_DRAWING_ELEMENT_LOGO				= 0x00000040,
	SAPI_ENUM_DRAWING_ELEMENT_SUGGESTED_TITLE	= 0x00000080, // Not implemented yet (defined in OFFICEXMLP 
	SAPI_ENUM_DRAWING_ELEMENT_INITIALS			= 0x40000000  // This value is not count in NUMBER_OF_POSSIBLE_DRAWING_ELEMENTS
} SAPI_ENUM_DRAWING_ELEMENT;

typedef enum SAPI_ENUM_PROGRESS_CALLBACK_OPERATION{
	SAPI_ENUM_PROGRESS_CALLBACK_OPERATION_NONE	= 0,
	SAPI_ENUM_PROGRESS_CALLBACK_SIGN_BEGIN		= 1,
	SAPI_ENUM_PROGRESS_CALLBACK_SIGN_CONT		= 2,
	SAPI_ENUM_PROGRESS_CALLBACK_SIGN_END		= 3,
	SAPI_ENUM_PROGRESS_CALLBACK_VERIFY_BEGIN	= 4,
	SAPI_ENUM_PROGRESS_CALLBACK_VERIFY_CONT		= 5,
	SAPI_ENUM_PROGRESS_CALLBACK_VERIFY_END		= 6,
	SAPI_ENUM_PROGRESS_CALLBACK_HASH_BEGIN		= 7,
	SAPI_ENUM_PROGRESS_CALLBACK_HASH_CONT		= 8,
	SAPI_ENUM_PROGRESS_CALLBACK_HASH_END		= 9
}SAPI_ENUM_PROGRESS_CALLBACK_OPERATION;

typedef enum SAPI_ENUM_CONTEXT_TYPE{
	SAPI_ENUM_CONTEXT_TYPE_NONE			= 0,
	SAPI_ENUM_CONTEXT_TYPE_CA			= 1,
	SAPI_ENUM_CONTEXT_TYPE_ENUM_CERT	= 2,
	SAPI_ENUM_CONTEXT_BUFF_SIGN			= 3,	
	SAPI_ENUM_CONTEXT_BUFF_VERIFY		= 4,
	SAPI_ENUM_CONTEXT_BUFF_HASH			= 5,	
	SAPI_ENUM_CONTEXT_TYPE_ENUM_SF		= 6,
	SAPI_ENUM_CONTEXT_TYPE_ENUM_GR_IMG	= 7,
	SAPI_ENUM_CONTEXT_TICKET_CHECK		= 8,
	SAPI_ENUM_CONTEXT_TYPE_SF_LOCATOR   = 9,
	SAPI_ENUM_CONTEXT_TYPE_SF_COMBINED  = 10,
	SAPI_ENUM_CONTEXT_TYPE_TOKEN_ID		= 11,
	SAPI_ENUM_CONTEXT_TYPE_ANON_CA		= 12
}SAPI_ENUM_CONTEXT_TYPE;

typedef enum SAPI_ENUM_EXTENDED_TIME_FORMAT{
	SAPI_ENUM_EXTENDED_TIME_FORMAT_NONE		= 0,
	SAPI_ENUM_EXTENDED_TIME_FORMAT_GMT		= 1, //with difference from GMT
	SAPI_ENUM_EXTENDED_TIME_FORMAT_SYSTEM	= 2  // take definitions from system
}SAPI_ENUM_EXTENDED_TIME_FORMAT;

typedef enum SAPI_ENUM_DEPENDENCY_MODE
{
	SAPI_ENUM_DEPENDENCY_MODE_NONE			= 0,
	SAPI_ENUM_DEPENDENCY_MODE_DEPENDENT		= 1,
	SAPI_ENUM_DEPENDENCY_MODE_INDEPENDENT	= 2
}SAPI_ENUM_DEPENDENCY_MODE;

typedef enum SAPI_ENUM_SIGNATURE_TYPE {
	SAPI_ENUM_SIGNATURE_NONE		                    = 0,
	SAPI_ENUM_SIGNATURE_DIGITAL		                    = 1,
	SAPI_ENUM_SIGNATURE_E_HASH		                    = 2     //not supported
} SAPI_ENUM_SIGNATURE_TYPE;

typedef enum SAPI_ENUM_GRAPHIC_IMAGE_FORMAT {
	SAPI_ENUM_GRAPHIC_IMAGE_NONE			= 0,
	SAPI_ENUM_GRAPHIC_IMAGE_PDF_LINE		= 1,
	SAPI_ENUM_GRAPHIC_IMAGE_PDF_BMP			= 2,
	SAPI_ENUM_GRAPHIC_IMAGE_BMP				= 3,
	SAPI_ENUM_GRAPHIC_IMAGE_BMP_B64			= 4,
	SAPI_ENUM_GRAPHIC_IMAGE_USER_DEFINED	= 5, // as is
	SAPI_ENUM_GRAPHIC_IMAGE_PDF_BMP2		= 6
}SAPI_ENUM_GRAPHIC_IMAGE_FORMAT;


typedef enum SAPI_ENUM_CA_INFO_TYPE {
	SAPI_ENUM_CA_INFO_NONE	= 0,
	SAPI_ENUM_CA_INFO_AIA	= 1,	
	SAPI_ENUM_CA_INFO_CRL	= 2	
}SAPI_ENUM_CA_INFO_TYPE;

typedef enum SAPI_ENUM_FILE_TYPE {
	SAPI_ENUM_FILE_NONE		= 0,
	SAPI_ENUM_FILE_WORD		= 1,	
	SAPI_ENUM_FILE_ADOBE	= 2,	
	SAPI_ENUM_FILE_TIFF		= 3,
	SAPI_ENUM_FILE_DETACHED	= 4,	//not supported
	SAPI_ENUM_FILE_P7M		= 5,	//not supported
	SAPI_ENUM_FILE_XML		= 6,     
	SAPI_ENUM_FILE_OFFICE_XML_PACKAGE	= 7, 
	SAPI_ENUM_FILE_INFOPATH_XML_FORM	= 8
}SAPI_ENUM_FILE_TYPE;

typedef enum SAPI_ENUM_CONF_ID {
	SAPI_ENUM_CONF_ID_NONE				= 0,
	SAPI_ENUM_CONF_ID_REASON			= 1,
	SAPI_ENUM_CONF_ID_SEL_CERT_TITLE	= 2, // the title in the GUI select certificate dialog
	SAPI_ENUM_CONF_ID_SEL_CERT_CMD		= 3, // the command in the GUI select certificate dialog
	SAPI_ENUM_CONF_ID_CHK_CRL_ENUM		= 4, // Whether to filter certificate that has CRL problems
	SAPI_ENUM_CONF_ID_CHK_CRL_VERIFY	= 5, // Whether to check CRL while verifying a signature
	SAPI_ENUM_CONF_ID_VERIFY_CERT_SIGN	= 6, // whether to verify the certificate validity before signing
	SAPI_ENUM_CONF_ID_PROGRESS_CALLBACK	= 7, // set the progress callback for FT sign and verify functions
	SAPI_ENUM_CONF_ID_WORD_SF_FUNC		= 8,
	SAPI_ENUM_CONF_ID_REASON_LABEL		= 9,  // Reason label in the signature field
	SAPI_ENUM_CONF_ID_DATE_LABEL		= 10, // Date label in the signature field
	SAPI_ENUM_CONF_ID_SIGNER_LABEL		= 11, // Signer name label in the signature field
	SAPI_ENUM_CONF_ID_CERT_SERIAL_ID	= 12, // serial ID of the certificate that will auotomatically be used for signing
	SAPI_ENUM_CONF_ID_CERT_CHAIN_FLAGS	= 13, // flags relevant for retrieving the certificate chain
	SAPI_ENUM_CONF_ID_PREFERRED_TOKEN	= 14, // a string representing the token a graphical image should be set to
	SAPI_ENUM_CONF_ID_CERT_SKI			= 15, // Subject key identifier of the certificate that will auotomatically be used for signing
	SAPI_ENUM_CONF_ID_CERT_SET_DEFAULT	= 16, // indicates whether to set the automatic selected cert as default for future operations
	SAPI_ENUM_CONF_ID_GR_SIG_PREF_NAME	= 17, // prefered graphical image name for auto selection.
	SAPI_ENUM_CONF_ID_PDF_OWNER_PWD		= 18, // owner password needed to modify protected PDF documents
	SAPI_ENUM_CONF_ID_PDF_USER_PWD		= 19, // user password needed to open protected PDF documents
	SAPI_ENUM_CONF_ID_PDF_SF_FUNC		= 20,
	SAPI_ENUM_CONF_ID_GMT_OFFSET		= 21,  // use this to override local system gmt offset (in minutes)
    SAPI_ENUM_CONF_ID_RET_EXT_FIELD_INFO= 22,
	SAPI_ENUM_CONF_ID_SECURED_TS_ENABLE	= 23,  // indicates whether to use secured TS
	SAPI_ENUM_CONF_ID_SECURED_TS_URL	= 24,  // the URL of the timestamp server
	SAPI_ENUM_CONF_ID_SECURED_TS_USER	= 25,  // The account name in the timestamp server
	SAPI_ENUM_CONF_ID_SECURED_TS_PWD	= 26,  // The encrypted password of he TS server account
	SAPI_ENUM_CONF_ID_SECURED_TS_ADDITIONAL_BYTES	= 27, // The amount of bytes need to be added to the PKCS7 blob
	SAPI_ENUM_CONF_ID_TS_CERT_STATUS	= 28,
	SAPI_ENUM_CONF_ID_TITLE				= 29,   // This value is used as an additional visual info in a signature field (title in the MRD)
	SAPI_ENUM_CONF_ID_ADDITIONAL_TEXT	= 29,   // This value is used as an additional visual info in a signature field
	SAPI_ENUM_CONF_ID_PDF_ROAMING_ID_SRV= 30,
	SAPI_ENUM_CONF_ID_KEY_CONTAINER_NAME= 31,
	SAPI_ENUM_CONF_ID_SLOT_NUMBER       = 32,
	SAPI_ENUM_CONF_ID_LOGO_PREF_NAME	= 33, // preferred logo name for auto selection.
	SAPI_ENUM_CONF_ID_LOCK_USER			= 34, // Enables 3rd party applications to use the certificate store
	SAPI_ENUM_CONF_ID_EMBED_OCSP		= 35, // whether to embed OCSP response in the PKCS7 blob 
	SAPI_ENUM_CONF_ID_OCSP_URL			= 36, // The default URL to use in case no URL exists in the certificate
	SAPI_ENUM_CONF_ID_CERT_PUBLIC		= 37, // The public key of the certificate we want to sign with
	SAPI_ENUM_CONF_ID_TIFF_BANNER_CREATE= 38,  // Create signature field to be signed with banner 	
	SAPI_ENUM_CONF_ID_TIFF_IGNORE_EMBEDDED_CLEAR = 39,  // Ignore Tiff clear method as Embedded compressed Area
	SAPI_ENUM_CONF_ID_XADES_TEMPLATE    = 40,  // A template of the qualifying properties to enable using XADES-PES 	
	SAPI_ENUM_CONF_ID_EXTENDED_VALIDATION = 41, // This value is used for extended validation.
	SAPI_ENUM_CONF_ID_PDF_FONT_PATH		= 42, // the font path of the textual properties in the PDF signature appearance
	SAPI_ENUM_CONF_ID_PDF_FONT_SIZE		= 43,  // the font size of the textual properties in the PDF signature appearance
	SAPI_ENUM_CONF_ID_PDF_ATTRIBUTION	= 44,  // whether to embed CoSign attribution in PDF signatures
	SAPI_ENUM_CONF_ID_CERT_VERIFY		= 45,	// The certificate used for PKCS#1 signature verification
	SAPI_ENUM_CONF_ID_GR_IMG_REDUCE		= 46,	// whether to use image reduction when saving graphical images to appliance.
	SAPI_ENUM_CONF_ID_MIN_ADES_VERIFY	= 47,	// Minimum level of advanced signature verification. Currently only BES can be set
	SAPI_ENUM_CONF_ID_INFP_SP_USER_NAME = 48,   // User name needed to access InfoPath Forms from Share Point server
	SAPI_ENUM_CONF_ID_INFP_SP_USER_PWD	= 49,   // Password needed to access InfoPath Forms from Share Point server
	SAPI_ENUM_CONF_ID_INFP_SP_DOMAIN	= 50,   // Domain needed to access InfoPath Forms from Share Point server
	SAPI_ENUM_CONF_ID_INFP_TEMPLATE_NAME= 51,    // InfoPath Template Name
	SAPI_ENUM_CONF_ID_APPEARANCE_MASK	= 52,	// Appearance mask used for sign
	SAPI_ENUM_CONF_ID_OLD_STYLE_PDF_APP = 53,   // Use the old style appearance in PDF where the text was not represented as an image
	SAPI_ENUM_CONF_ID_PDF_FORCE_DISPLAY_SIGNER = 54, // Force display signer name in the PDF signature appearance
	SAPI_ENUM_CONF_ID_GR_IMG_REDUCE_SCALE	   = 55, // Scaling percentage when using image reduction when saving graphical images to appliance.
	SAPI_ENUM_CONF_ID_SIGNATURE_ADDITIONAL_BYTES = 56,
	SAPI_ENUM_CONF_ID_XML_ALT_ID = 57,				// Alternative ID attribute name (like AssertionID
	SAPI_ENUM_CONF_ID_PADES_ENABLE = 58,				// Enable PADES signatures - Adobe supports PADES from version 10

	SAPI_ENUM_CONF_ID_PDF_LOCATOR_OPEN_PATTERN	 = 59, // Enable setting PDF field locator open pattern
	SAPI_ENUM_CONF_ID_PDF_LOCATOR_CLOSE_PATTERN	 = 60,  // Enable setting PDF field locator close pattern
	SAPI_ENUM_CONF_ID_AUTO_GR_IMAGE_DISABLE = 61,				// Disable Auto graphic


	// New values to support CRL embedding
	SAPI_ENUM_CONF_ID_EMBED_CRL_CHAIN = 62,		// Indicates if we want to embed the CRL chain in the signature pkcs7 blob. DWORD. Fefault 0
	SAPI_ENUM_CONF_ID_MAX_CRL_SIZE= 63,		//  If a CRL is larger than this size, the operation fails.
	SAPI_ENUM_CONF_ID_NEXT_CRL_UPDATE_THRESHOLD= 64,		//  Minimal time gap (in seconds) between current time and CRL next update time.  
	SAPI_ENUM_CONF_ID_THIS_CRL_UPDATE_THRESHOLD= 65,		//  Maximal time gap (in seconds) between this update time and CRL current time.  
	SAPI_ENUM_CONF_ID_CRITICAL_CRL_ERRORS= 66,		// if this is 0, erros in fetching CRLs are not considered critical
	SAPI_ENUM_CONF_ID_CRL_COMM_TIMEOUT=67,			// Timeout (in milliseconds) for CRL fetching operations
	SAPI_ENUM_CONF_ID_OCSP_CACHE_LENGTH=68,			// OCSP cahce legnth calculation

}SAPI_ENUM_CONF_ID;

typedef enum SAPI_ENUM_DATA_TYPE {
	SAPI_ENUM_DATA_TYPE_NONE			= 0,
	SAPI_ENUM_DATA_TYPE_DWORD			= 1,	
	SAPI_ENUM_DATA_TYPE_STR				= 2,
	SAPI_ENUM_DATA_TYPE_WSTR			= 3,
	SAPI_ENUM_DATA_TYPE_TIME			= 4,
	SAPI_ENUM_DATA_TYPE_UCHAR			= 5,
	SAPI_ENUM_DATA_TYPE_FUNC_PTR		= 6,
	SAPI_ENUM_DATA_TYPE_SAPI_FILE_TIME	= 7

}SAPI_ENUM_DATA_TYPE;

typedef enum SAPI_ENUM_IMAGE_SOURCE_TYPE {
	SAPI_ENUM_IMAGE_SOURCE_NONE		= 0,
	SAPI_ENUM_IMAGE_SOURCE_PAD		= 1,    //not supported
	SAPI_ENUM_IMAGE_SOURCE_TOKEN	= 2
}SAPI_ENUM_IMAGE_SOURCE_TYPE;

typedef enum SAPI_ENUM_CERT_STATUS {
	SAPI_ENUM_CERT_STATUS_NOT_CHECKED	= 0,
	SAPI_ENUM_CERT_STATUS_OK			= 1,
	SAPI_ENUM_CERT_STATUS_REVOKED		= 2,
	SAPI_ENUM_CERT_STATUS_INVALID		= 3,
	SAPI_ENUM_CERT_STATUS_WARNING		= 4,
	SAPI_ENUM_TS_CERT_STATUS_REVOKED	= 5,
	SAPI_ENUM_TS_CERT_STATUS_INVALID	= 6
}SAPI_ENUM_CERT_STATUS;

typedef enum SAPI_ENUM_CERT_FIELD {
	SAPI_ENUM_CERT_FIELD_NONE		= 0,
	SAPI_ENUM_CERT_FIELD_CERT		= 1,
	SAPI_ENUM_CERT_FIELD_SUBJECT	= 2,
	SAPI_ENUM_CERT_FIELD_ISSUER		= 3,
	SAPI_ENUM_CERT_FIELD_EMAIL		= 4,
	SAPI_ENUM_CERT_FIELD_NOT_BEFORE	= 5,
	SAPI_ENUM_CERT_FIELD_NOT_AFTER	= 6,
	SAPI_ENUM_CERT_FIELD_SERIAL_ID	= 7,
	SAPI_ENUM_CERT_FIELD_SKI		= 8,
	SAPI_ENUM_CERT_FIELD_HASHED_ISSUER_NAME	= 9,
	SAPI_ENUM_CERT_FIELD_HASHED_ISSUER_KEY	= 10,
	SAPI_ENUM_CERT_FIELD_OCSP_URL	= 11,
	SAPI_ENUM_CERT_FIELD_PUBLIC_KEY	= 12,
}SAPI_ENUM_CERT_FIELD;

typedef enum SAPI_ENUM_PKCS7_FIELD {
	SAPI_ENUM_PKCS7_FIELD_NONE		= 0,
	SAPI_ENUM_PKCS7_FIELD_CERT		= 1,
	SAPI_ENUM_PKCS7_FIELD_SIGNATURE	= 2,
	SAPI_ENUM_PKCS7_FIELD_TIME		= 3,
	SAPI_ENUM_PKCS7_FIELD_HASH		= 4,
	SAPI_ENUM_PKCS7_FIELD_HASH_ALG	= 5,
	SAPI_ENUM_PKCS7_FIELD_SIGNED_CONTENT	= 6,
	SAPI_ENUM_PKCS7_FIELD_SIGNED_CERT	= 7
}SAPI_ENUM_PKCS7_FIELD;

typedef enum SAPI_ENUM_STORE_TYPE {
    SAPI_ENUM_STORE_NONE			= 0,
    SAPI_ENUM_STORE_USER			= 1,
    SAPI_ENUM_STORE_LOCAL_MACHINE	= 2
}SAPI_ENUM_STORE_TYPE;

typedef enum SAPI_ENUM_STRUCT_TYPE {
	SAPI_ENUM_STRUCT_TYPE_NONE			= 0,
	SAPI_ENUM_STRUCT_TYPE_SIGNED_FIELD	= 1,
	SAPI_ENUM_STRUCT_TYPE_GR_IMAGE		= 2,
	SAPI_ENUM_STRUCT_TYPE_GR_SIG_INFO	= 3,
	SAPI_ENUM_STRUCT_TYPE_FIELD_INFO	= 4
}SAPI_ENUM_STRUCT_TYPE;

typedef enum SAPI_ENUM_CALC_CRED_METHOD {
	SAPI_ENUM_CALC_CRED_METHOD_NONE		= 0
}SAPI_ENUM_CALC_CRED_METHOD;

typedef enum SAPI_ENUM_HASH_TYPE {
	SAPI_ENUM_HASH_TYPE_MD5		= 0x8003,
	SAPI_ENUM_HASH_TYPE_SHA1	= 0x8004,
	SAPI_ENUM_HASH_TYPE_SHA256	= 0x800c,
	SAPI_ENUM_HASH_TYPE_SHA384	= 0x800d,
	SAPI_ENUM_HASH_TYPE_SHA512	= 0x800e
}SAPI_ENUM_HASH_TYPE;


typedef enum SAPI_ENUM_GR_IMG_SELECT_MODE {
	SAPI_ENUM_GR_IMG_SEL_MODE_SELECT			= 0,
	SAPI_ENUM_GR_IMG_SEL_MODE_VIEW_USER			= 1,
	SAPI_ENUM_GR_IMG_SEL_MODE_VIEW_KIOSK		= 2,
	SAPI_ENUM_GR_IMG_SEL_MODE_VOLATILE			= 3
}SAPI_ENUM_GR_IMG_SELECT_MODE;

typedef enum SAPI_ENUM_SIG_FIELD_SETTINGS_ID {
	SAPI_ENUM_SIG_FIELD_SETTING_NONE				= 0,
	SAPI_ENUM_SIG_FIELD_SETTING_CLEAR_PERMIT		= 1,
	SAPI_ENUM_SIG_FIELD_SETTING_TITLE				= 2,
	SAPI_ENUM_SIG_FIELD_SETTING_TITLE_TAG			= 3,
	SAPI_ENUM_SIG_FIELD_SETTING_SUGGESTED_SIGNER	= 4,
	SAPI_ENUM_SIG_FIELD_SETTING_INSTRUCT_TO_SIGNER	= 5,	
	SAPI_ENUM_SIG_FIELD_SETTING_ALLOW_REASON		= 6,
	SAPI_ENUM_SIG_FIELD_SETTING_EMAIL				= 7,
	SAPI_ENUM_SIG_FIELD_SETTING_SIGNED_SECTION		= 8,
	SAPI_ENUM_SIG_FIELD_SETTING_FIELD_CONTAINER		= 9,
	SAPI_ENUM_SIG_FIELD_SETTING_FIELD_MODE			= 10,
	SAPI_ENUM_SIG_FIELD_SETTING_CUSTOM1				= 30,
	SAPI_ENUM_SIG_FIELD_SETTING_CUSTOM2				= 31,
	SAPI_ENUM_SIG_FIELD_SETTING_CUSTOM3				= 32
}SAPI_ENUM_SIG_FIELD_SETTINGS_ID;

// one these values will be the value of the configuration value - SAPI_ENUM_CONF_ID_RET_EXT_FIELD_INFO
typedef enum SAPI_ENUM_FIELD_EXT_INFO_FORMAT {
	SAPI_ENUM_FIELD_EXT_INFO_FORMAT_NONE		= 0,
	SAPI_ENUM_FIELD_EXT_INFO_FORMAT_OLD			= 1,
	SAPI_ENUM_FIELD_EXT_INFO_FORMAT_V1			= 2
}SAPI_ENUM_FIELD_EXT_INFO_FORMAT;

typedef enum SAPI_ENUM_FIELD_MODE {
	SAPI_ENUM_FIELD_MODE_NONE					= 0,
	SAPI_ENUM_FIELD_MODE_SINGLE					= 1,
	SAPI_ENUM_FIELD_MODE_COUNTER_SIGN			= 2,
	SAPI_ENUM_FIELD_MODE_CO_SIGN				= 3
}SAPI_ENUM_FIELD_MODE;

typedef enum SAPI_ENUM_TICKET_CHECK_STATUS {
	SAPI_ENUM_TICKET_CHECK_STATUS_OK			= 0,
	SAPI_ENUM_TICKET_CHECK_STATUS_CONTINUE		= 1,
	SAPI_ENUM_TICKET_CHECK_STATUS_ABORT			= 2
}SAPI_ENUM_TICKET_CHECK_STATUS;

typedef enum SAPI_ENUM_CEREMONY_COMPONENT_SHOW_MODE {
	SAPI_ENUM_CEREMONY_COMPONENT_SHOW_MODE_NONE					= 0,
	SAPI_ENUM_CEREMONY_COMPONENT_SHOW_MODE_NOT_DISPLAY			= 1,
	SAPI_ENUM_CEREMONY_COMPONENT_SHOW_MODE_DISPLAY				= 2,
	SAPI_ENUM_CEREMONY_COMPONENT_SHOW_MODE_BY_APPEARANCE_MASK	= 4
}SAPI_ENUM_CEREMONY_COMPONENT_SHOW_MODE;

typedef enum SAPI_ENUM_ADVANCED_SIG_LEVEL {
	SAPI_ENUM_ADVANCED_SIG_LEVEL_NONE							= 0,
	SAPI_ENUM_ADVANCED_SIG_LEVEL_BES							= 1,
	SAPI_ENUM_ADVANCED_SIG_LEVEL_PES							= 2,
	SAPI_ENUM_ADVANCED_SIG_LEVEL_TS								= 3
}SAPI_ENUM_ADVANCED_SIG_LEVEL;

//mask 
typedef enum SAPI_ENUM_GR_SIG_IMG_SRC
{
	IMG_SRC_NONE	=	0,
	IMG_SRC_TOKEN	=	1,
	IMG_SRC_LOCAL	=	2
} SAPI_ENUM_GR_SIG_IMG_SRC;

typedef enum SAPI_ENUM_FILE_HANDLE_TYPE
{
	SAPI_ENUM_FILE_HANDLE_NONE			= 0,
	SAPI_ENUM_FILE_HANDLE_MEMORY		= 1,
	SAPI_ENUM_FILE_HANDLE_FILE			= 2
} SAPI_ENUM_FILE_HANDLE_TYPE;

typedef enum SAPI_ENUM_SIG_CLEAR_POLICY_TYPE
{
	SAPI_ENUM_SIG_CLEAR_POLICY_ALWAYS			= 0,
	SAPI_ENUM_SIG_CLEAR_POLICY_NEVER			= 1,
	SAPI_ENUM_SIG_CLEAR_POLICY_SIGNER_BY_CN		= 2
} SAPI_ENUM_SIG_CLEAR_POLICY_TYPE;

typedef enum SAPI_ENUM_AUTH_MODE
{
    SAPI_AUTH_MODE_NONE                      = 0,
	SAPI_AUTH_MODE_SSPI                      = 1,    // SSPI SSO
    SAPI_AUTH_MODE_VERIFY_USER_SRV_SIDE      = 2,    // user/pwd verified by server
    SAPI_AUTH_MODE_SSPI_USRPWD               = 3,    // SSPI with user/pwd params
    SAPI_AUTH_MODE_VERIFY_DB_USER_SRV_SIDE   = 4,     // The user and his credential declared in the
                                                // CoSign DB
    SAPI_AUTH_MODE_SAML_SRV_SIDE				= 5,     // The user and his credential declared in the
	SAPI_AUTH_MODE_JWT_SRV_SIDE				= 6 
} SAPI_ENUM_AUTH_MODE;

typedef enum SAPI_ENUM_SERVER_KIND
{
    SAPI_SERVER_KIND_NONE           = 0,
	SAPI_SERVER_KIND_STANDALONE		= 1,
	SAPI_SERVER_KIND_MASTER			= 2,
	SAPI_SERVER_KIND_SLAVE			= 3
} SAPI_ENUM_SERVER_KIND;

typedef enum SAPI_ENUM_DIRECTORY_KIND
{
	SAPI_NONE_DIRECTORY_KIND	    = 0,	
	SAPI_ACTIVE_DIRECTORY_KIND		= 1,	
	SAPI_NDS_DIRECTORY_KIND		    = 2,
    SAPI_PUSH_DIRECTORY_KIND        = 3,
    SAPI_LDAP_DIRECTORY_KIND        = 4
} SAPI_ENUM_DIRECTORY_KIND;

typedef enum SAPI_ENUM_TOKEN_KIND
{
    SAPI_TOKEN_KIND_NONE = 0,
	SAPI_TOKEN_KIND_TOTP = 1,
} SAPI_ENUM_TOKEN_KIND;

typedef enum SAPI_ENUM_TOKEN_PURPOSES
{
    SAPI_TOKEN_PURPOSES_NONE = 0,
	SAPI_TOKEN_PURPOSES_LOGIN = 1, // for future use
	SAPI_TOKEN_PURPOSES_SIGN = 2
} SAPI_ENUM_TOKEN_PURPOSES;


// The following enum is copied from ENUM_CA_STATUS on mobtypes.h
typedef enum {
	SAPI_ENUM_CA_STATUS_UNKNOWN	= 0,	//Obsolete
	SAPI_ENUM_CA_STATUS_STOPPED	= 1,	//Obsolete
	SAPI_ENUM_CA_STATUS_RUNNING	= 2,	//Obsolete
	SAPI_ENUM_CA_STATUS_STARTING	= 3,	//Obsolete
	SAPI_ENUM_CA_STATUS_STOPPING	= 4,	//Obsolete
	SAPI_ENUM_CA_STATUS_NONE = 5,
	SAPI_ENUM_CA_STATUS_CA_PRECHECKS=10,
	SAPI_ENUM_CA_STATUS_CA_KEY_SIZE_RETRIEVED=15,
	SAPI_ENUM_CA_STATUS_ACCOUNT_ACCESSED=20,
	SAPI_ENUM_CA_STATUS_CA_KEY_WAS_GENERATED=25,
	SAPI_ENUM_CA_STATUS_COPY_OLD_CA_CERT_TO_DB=30,
	SAPI_ENUM_CA_STATUS_PUT_CERT_CHAIN_IN_STORE=35,
	SAPI_ENUM_CA_STATUS_CA_CERT_WAS_READ=40,
	SAPI_ENUM_CA_STATUS_CA_CERT_WAS_WRITTEN_TO_DB=45,
	SAPI_ENUM_CA_STATUS_CA_CERT_WAS_GENERATED=50,
	SAPI_ENUM_CA_STATUS_CA_CRQ_WAS_CREATED=55,
	SAPI_ENUM_CA_STATUS_CRL_PUBLISH_CHANGE=60,
	SAPI_ENUM_CA_STATUS_PUBLISH_CA_CERT=65,
    SAPI_ENUM_CA_STATUS_WAIT_FOR_CRP=70,
	SAPI_ENUM_CA_STATUS_WAIT_FOR_CA_PFX=75,
    SAPI_ENUM_CA_STATUS_INSTALLED_SUCCESSFULY=80,
	SAPI_ENUM_CA_STATUS_CA_DISABLED = 85
}SAPI_ENUM_CA_STATUS;

// The following enum is copied from ENUM_CA_TYPE on mobtypes.h
typedef enum 
{
	SAPI_ENUM_CA_TYPE_NONE                          = 0,
	SAPI_ENUM_OBS_CA_TYPE_ENTERPRISE_ROOT           = 1, //Obsolete
	SAPI_ENUM_OBS_CA_TYPE_ENTERPRISE_SUBORDINATE    = 2, //Obsolete
	SAPI_ENUM_CA_TYPE_STANDALONE_ROOT               = 3,
	SAPI_ENUM_CA_TYPE_STANDALONE_SUBORDINATE        = 4,
	SAPI_ENUM_CA_TYPE_COMODO						= 5,
	SAPI_ENUM_CA_TYPE_CHOSENSEC						= 6,
	SAPI_ENUM_CA_TYPE_SYMANTEC						= 7,	
	SAPI_ENUM_CA_TYPE_LAST							= 7 //the value of this enum is equal to the last valid CA type
											  // install2 makes use of this feature
}SAPI_ENUM_CA_TYPE;

// The following enum is copied from ENUM_CA_ROLE on mobtypes.h
typedef enum 
{
	SAPI_ENUM_CA_ROLE_NONE                          = 0,
	SAPI_ENUM_CA_ROLE_DEFAULT                       = 1,
}SAPI_ENUM_CA_ROLE;

#endif


#endif